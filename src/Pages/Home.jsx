import React, { useState } from 'react';
import '../Css/Home.css';
import Navbar from '../Components/Navbar';
import welcome_logo from '../Img/welcome-logo.png';
import scrolldown from '../Img/sc1.gif';
import ImgPer from '../Img/f.png';
import Footer from '../Components/Footer';
import Select from 'react-select'; // ÿ£ÿ∂ŸÅ Ÿáÿ∞ÿß ŸÅŸä ÿ£ÿπŸÑŸâ ÿßŸÑŸÖŸÑŸÅ
import { useNavigation } from 'react-router-dom';

export default function Home() {

  const [TcfChoice, setTcfChoice] = useState(null); // ÿßŸÑÿÆŸäÿßÿ± ÿßŸÑÿ£ŸàŸÑ
  const [ServiceChoosenState, SetServiceChoosen] = useState(false); // ÿßŸÑÿÆŸäÿßÿ± ÿßŸÑÿ´ÿßŸÜŸä
  const [VisaOptionChoosen, SetVisaOptionChoosen] = useState(false);





 const [openIndex, setOpenIndex] = useState(null);

  const faqs = [
    {
      question: "Quels types de services proposez-vous ?",
      answer: "Nous sommes sp√©cialis√©s dans la prestation de services, l‚Äôaccompagnement personnalis√© et la vente d‚Äôarticles num√©riques. Nous offrons des solutions sur mesure afin de r√©pondre aux besoins vari√©s de nos clients et de les aider √† r√©ussir leurs projets d‚Äô√©tudes √† l‚Äô√©tranger."
    },
    {
      question: "De quelle mani√®re accompagnez-vous les candidats au TCF ?",
      answer: `nous proposons un service de prise de rendez-vous pour le TCF, afin de vous simplifier toutes les d√©marches administratives. D‚Äôautre part, nous mettons √† votre disposition des articles num√©riques de pr√©paration au TCF, con√ßus pour vous aider √† r√©viser efficacement et √† comprendre le format du test. D√©couvrez notre s√©lection d'articles de pr√©paration sp√©cialement con√ßus pour le TCF dans notre boutique en ligne <p><a href="">üëâ Acc√©der √† notre boutique</a></p>`
    },
    {
      question: "Quelle est votre politique de retour ?",
      answer: "Nous offrons une politique de retour de 30 jours pour tous les produits. Les articles doivent √™tre dans leur √©tat d'origine, ne pas avoir √©t√© utilis√©s et √™tre accompagn√©s du re√ßu ou de la preuve d'achat. Les remboursements sont effectu√©s dans les 5 √† 7 jours ouvrables suivant la r√©ception de l'article retourn√©."
    }
  ];

  const toggleFAQ = (index) => {
    setOpenIndex(openIndex === index ? null : index);
  };

  const visaOptions = [
    { value: 'visa_demande', label: 'Demander Visa' },
  ];

  const ServiceChoosen = [
    { value: 'DAP', label: 'TCF DAP' },
    { value: 'SO', label: 'TCF SO' },
  ];

  const tcfOptions = [
    { value: 'payment', label: 'Prendre rendez-vous avec Nazya Services' },
    { value: 'Boutique', label: 'Pr√©parer au test TCF avec Nazya Services' }
  ];



    const type_ladmission = [
    { value: 'connecte', label: "√©tablissement connect√© √† l'espace campus France " },
    { value: 'no_connect', label: "√©tablissement non connect√© √† l'espace campus France" },
  ];


const [admissionChoice, setAdmissionChoice] = useState(null);
const [subAdmissionChoice, setSubAdmissionChoice] = useState(null);

// ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ´ÿßŸÜŸä (ŸÖŸÇÿ≥ŸÖÿ© A / B)
const optionsForA = [
  { value: 'a1', label: 'proc√©dure Dap blanche (L1)' },
  { value: 'a2', label: 'proc√©dure hors Dap' },
];

const optionsForB = [
  { value: 'b1', label: 'universit√©s de Paris Saclay' },
  { value: 'b2', label: 'proc√©dure parcoursup' },
];



  const customSelectStyles = {
    control: (provided) => ({
      ...provided,
      backgroundColor: 'white',
      borderRadius: '6px',
      border: '1px solid #ccc',
      padding: '5px',
      fontSize: '16px',
      fontFamily: "var(--second-font)",
      width: '100%',
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isFocused ? '#e6f0fa' : 'white',
      color: 'black',
      padding: '12px',
      fontSize: '16px',
      cursor: "pointer",
      fontFamily: "var(--second-font)",
    }),
    placeholder: (provided) => ({
      ...provided,
      color: '#999',
      fontSize: '16px'
    })
  };

  let buttonText = "Prendre rendez-vous";
  let buttonLink = "/round";
  let isDisabled = false;

  if (TcfChoice?.value === "payment") {
    isDisabled = !ServiceChoosenState;
    buttonText = "Prendre rendez-vous";
    buttonLink = "/round";
  } else if (TcfChoice?.value === "Boutique") {
    isDisabled = false;
    buttonText = "Aller √† la boutique";
    buttonLink = "/boutique";
  } else {
    isDisabled = true;
  }

  return (
    <>
  
    <Navbar  current_page={"home"}/>


  <section id="first_sec">
    <div id="filter_bg" />
    <div id="exposer_sec_one">
      <div className="ep_one_sec">
        <h1>Votre partenaire pour r√©ussir vos  <span className="owner-color-aura">√©tudes en France!</span></h1>
        <p id="title_sec_one">
          D√©couvrez nos services personnalis√©s pour r√©ussir votre projet
          d‚Äô√©tudes en France .
        </p>
        <div className="container">
          <a href="#" className="button type--C">
            <div className="button__line" />
            <div className="button__line" />
            <span className="button__text">Contactez-nous d√®s aujourd‚Äôhui</span>
            <div className="button__drow1" />
            <div className="button__drow2" />
          </a>
        </div>
      </div>
      <div className="ep_two_sec">
        <img
          src={welcome_logo}
          alt="img of welcome"
          id="img_welcome"
        />
      </div>
    </div>

    <a href="#bg_sec_two"><img src={scrolldown} id='scroll_gif' alt="Scroll Down" /></a>
  </section>

    <section id="second_sec">


<svg id="bg_sec_two" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
  <rect width="100%" height="100%" fill="#2c3b4e" />

  <defs>
    <pattern id="grid" width="48" height="48" patternUnits="userSpaceOnUse">
      <path d="M 48 0 L 0 0 0 48" fill="none" stroke="#b7a8e6bd" strokeWidth="1" />
    </pattern>

    <linearGradient id="fadeGradient" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0%" stopColor="white" stopOpacity="0" />
      <stop offset="100%" stopColor="white" stopOpacity="1" />
    </linearGradient>

    <mask id="fadeMask">
      <rect width="100%" height="100%" fill="url(#fadeGradient)" />
    </mask>
  </defs>

  <rect width="100%" height="100%" fill="url(#grid)" mask="url(#fadeMask)" />

  <g stroke="#e0d4ff" strokeWidth="2" opacity="0.4">

    <line x1="0" y1="48" x2="48" y2="48">
      <animate attributeName="x1" values="0;100%;0" dur="8s" repeatCount="indefinite" />
      <animate attributeName="x2" values="48;100%;48" dur="8s" repeatCount="indefinite" />
    </line>

    <line x1="0" y1="192" x2="48" y2="192">
      <animate attributeName="x1" values="0;100%;0" dur="12s" repeatCount="indefinite" />
      <animate attributeName="x2" values="48;100%;48" dur="12s" repeatCount="indefinite" />
    </line>

    <line x1="0" y1="320" x2="48" y2="320">
      <animate attributeName="x1" values="0;100%;0" dur="15s" repeatCount="indefinite" />
      <animate attributeName="x2" values="48;100%;48" dur="15s" repeatCount="indefinite" />
    </line>

    <line x1="0" y1="420" x2="48" y2="420">
      <animate attributeName="x1" values="0;100%;0" dur="20s" repeatCount="indefinite" />
      <animate attributeName="x2" values="48;100%;48" dur="20s" repeatCount="indefinite" />
    </line>

    <line x1="96" y1="0" x2="96" y2="48">
      <animate attributeName="y1" values="0;100%;0" dur="10s" repeatCount="indefinite" />
      <animate attributeName="y2" values="48;100%;48" dur="10s" repeatCount="indefinite" />
    </line>

    <line x1="240" y1="0" x2="240" y2="48">
      <animate attributeName="y1" values="0;100%;0" dur="14s" repeatCount="indefinite" />
      <animate attributeName="y2" values="48;100%;48" dur="14s" repeatCount="indefinite" />
    </line>

    <line x1="360" y1="0" x2="360" y2="48">
      <animate attributeName="y1" values="0;100%;0" dur="18s" repeatCount="indefinite" />
      <animate attributeName="y2" values="48;100%;48" dur="18s" repeatCount="indefinite" />
    </line>

    <line x1="480" y1="0" x2="480" y2="48">
      <animate attributeName="y1" values="0;100%;0" dur="22s" repeatCount="indefinite" />
      <animate attributeName="y2" values="48;100%;48" dur="22s" repeatCount="indefinite" />
    </line>

  </g>
</svg>


<div id='content_saver_sec_two'>
  <h1>D√©couvrez les 3 √©tapes incontournables pour obtenir votre <span className="owner-color-aura">visa √©tudiant</span>  en toute s√©r√©nit√©</h1>
    <div id="card_organaser_sec_two">


      <div id="progress_line_etaps">
        <span className="one_progressive">1</span>
        <span className="two_progressive">2</span>
        <span className="three_progressive">3</span>
      </div>


      <div id='flexer_organaser_sec_two'>



        <div className="card_sec_two">
          <div className="card_icon_sec_two">
            <div className='icon_circle'>
              <i className="fa-solid fa-certificate"></i>
            </div>
            <h2>TCF</h2>
          </div>
          <div className="card_text_sec_two">

            <p>Souhaitez-vous prendre rendez-vous ou vous pr√©parer au TCF ?</p>
            <div className="custom-select-wrapper">
              <Select
                name="Date-or-Prepare"
                options={tcfOptions}
                placeholder="S√©lectionnez l‚Äôoption souhait√©e"
                styles={customSelectStyles}
                onChange={(option) => {
                  setTcfChoice(option);
                  SetServiceChoosen(false); // ŸÜÿ±ÿ¨ÿπŸá false ŸÉŸÑ ŸÖÿ±ÿ© Ÿäÿ∫Ÿäÿ± ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±
                }}
              />
            </div>

            <p>Type de TCF souhait√©</p>
            <div className="custom-select-wrapper">
              <Select
                name="TCF-Type"
                id='select_tcf_type'
                options={ServiceChoosen}
                placeholder="Choisir le TCF Type ..."
                styles={customSelectStyles}
                onChange={(option) => {
                  SetServiceChoosen(true);
                  // üü¢ ÿ™ÿÆÿ≤ŸäŸÜ ŸÅŸä localStorage ÿ≠ÿ≥ÿ® ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±
                  if (option.value === "DAP") {
                    localStorage.setItem("tcfType", "dap");
                  } else if (option.value === "SO") {
                    localStorage.setItem("tcfType", "so");
                  }
                }}
                isDisabled={TcfChoice?.value !== "payment"} // ŸÖŸÇŸÅŸÑ ÿ•ŸÑÿß ÿ•ÿ∞ÿß ÿßÿÆÿ™ÿßÿ± Rendez-vous
              />
            </div>

            <button
              disabled={isDisabled}
              id="take-date-tcf"
              onClick={() => {
                if (!isDisabled) {
                  const selectedType = localStorage.getItem("tcfType"); 
                  console.log("‚úÖ TCF choisi:", selectedType); // ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÅŸÇÿ∑
                  window.location.href = buttonLink;
                }
              }}
            >
              {buttonText}
            </button>

            
          </div>
        </div>



        <div className="card_sec_two">
  <div className="card_icon_sec_two">
    <div className="icon_circle">
      <i className="fa-solid fa-clipboard-check"></i>
    </div>
    <h2>L‚Äôadmission</h2>
  </div>

  <div className="card_text_sec_two">
    <p>S√©lectionnez votre type d‚Äô√©tablissemen :</p>

    {/* ÿßŸÑÿ≠ŸÇŸÑ ÿßŸÑÿ£ŸàŸÑ */}
    <Select
      name="L'admission"
      options={type_ladmission}
      placeholder="Choisissez d'√©tablissement type :"
      styles={customSelectStyles}
      onChange={(option) => {
        setAdmissionChoice(option.value); // A ÿ£Ÿà B
        setSubAdmissionChoice(null); // ŸÜŸÅÿ±ÿ∫ ÿßŸÑÿ´ÿßŸÜŸä ŸÑŸÖÿß Ÿäÿ∫Ÿäÿ± ÿßŸÑÿ£ŸàŸÑ
      }}
    />

        <p>S√©lectionnez l‚Äô√©tablissement:</p>


    {/* ÿßŸÑÿ≠ŸÇŸÑ ÿßŸÑÿ´ÿßŸÜŸä */}

    <Select
      id="only_select_pad"
      name="Sub-admission"
      options={
        admissionChoice === "connecte"
          ? optionsForA
          : admissionChoice === "no_connect"
          ? optionsForB
          : []
      }
      placeholder="Choisissez d'√©tablissement :"
      styles={customSelectStyles}
      value={subAdmissionChoice}
      onChange={(option) => setSubAdmissionChoice(option)}
      isDisabled={!admissionChoice} // ŸÖÿ∫ŸÑŸÇ ŸÑŸà ÿßŸÑÿ£ŸàŸÑ ŸÖÿ¥ ŸÖÿÆÿ™ÿßÿ±
    />

    {/* ÿ≤ÿ± Go Book */}
    <button
      id="take-date-tcf"
      disabled={!admissionChoice || !subAdmissionChoice} // ŸäŸÅÿ™ÿ≠ ŸÅŸÇÿ∑ ÿ®ÿπÿØ ÿßŸÑÿ≠ŸÇŸÑŸäŸÜ
      onClick={() => {
        if (admissionChoice && subAdmissionChoice) {
          window.location.href = "/admission"; // ÿ∫ŸäŸëÿ± ÿßŸÑŸÑŸäŸÜŸÉ ÿ≠ÿ≥ÿ® ÿ±ÿ∫ÿ®ÿ™ŸÉ
        }
      }}
    >
      Acc√©der
    </button>
  </div>
</div>



        <div className="card_sec_two">
          <div className="card_icon_sec_two">
            <div className='icon_circle'>
              <i className="fa-brands fa-cc-visa"></i>
            </div>
            <h2>Le visa</h2>
          </div>
          <div className="card_text_sec_two">
            
            <p>
              Apr√®s l‚Äôadmission, vous pourrez d√©poser votre demande de visa √©tudiant pour la France afin de finaliser votre inscription et pr√©parer votre s√©jour.
            </p>

            <p>
              Faire une demande:
            </p>

            <Select
                name="Date-or-Prepare"
                options={visaOptions}
                placeholder="Faire une demande visa"
                styles={customSelectStyles}
                onChange={(option) => {
                  SetVisaOptionChoosen(true); // ŸÜÿ±ÿ¨ÿπŸá false ŸÉŸÑ ŸÖÿ±ÿ© Ÿäÿ∫Ÿäÿ± ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±
                }}
              />

            <button
              id="take-date-tcf"
              disabled={!VisaOptionChoosen} // ŸäŸÅÿ™ÿ≠ ŸÅŸÇÿ∑ ÿ®ÿπÿØ ÿßŸÑÿ≠ŸÇŸÑŸäŸÜ
              onClick={() => {
                if (VisaOptionChoosen) {
                  window.location.href = "/visa"; // ÿ∫ŸäŸëÿ± ÿßŸÑŸÑŸäŸÜŸÉ ÿ≠ÿ≥ÿ® ÿ±ÿ∫ÿ®ÿ™ŸÉ
                }
              }}
            >
              Acc√©der
            </button>
          </div>
        </div>


      </div>

      <h3 id="invite_to_question_para">C'est fait¬†? Nous vous livrons tout ce que vous avez vu¬†!</h3>

    </div>

</div>

    </section>
      

    <section id="third_sec">
      <div className="tringel_sec_three"></div>

<h1 id='add_boutique_invite'>Pr√©parez-vous √† l'examen TCF gr√¢ce √† nos<span className='owner-color-aura2'> livres num√©riques</span> disponibles dans notre boutique.</h1>
      <div id="separator_sec_three">

        <div id="first_sec_three">
          <h4>Questions que vous pourriez poser:</h4>

          
           <div id="faq_ques" className="faq-container">
  {faqs.map((faq, index) => (
    <div
      key={index}
      className={`faq-item ${openIndex === index ? "open" : ""}`}
    >
      <div
        className="faq-question"
        onClick={() => toggleFAQ(index)}
      >
        {faq.question}
        <span className={`faq-icon ${openIndex === index ? "open" : ""}`}>
          +
        </span>
      </div>

      <div
        className={`faq-answer ${openIndex === index ? "open" : ""}`}
        dangerouslySetInnerHTML={{ __html: faq.answer }}
      ></div>
    </div>
  ))}
</div>

        </div>
        <div id="second_sec_three">
          <img src={ImgPer} id='personal_photo_sec_three' alt="personal image" />
        </div>
      </div>
    </section>

    <Footer />
</>

  )
}
